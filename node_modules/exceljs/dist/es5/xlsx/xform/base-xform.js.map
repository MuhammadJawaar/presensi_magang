<<<<<<< HEAD
{"version":3,"sources":["../../../../lib/xlsx/xform/base-xform.js"],"names":["parseSax","require","XmlStream","BaseXform","node","text","name","model","options","map","Object","values","forEach","xform","reset","obj","assign","saxParser","events","eventType","value","parseOpen","parseText","parseClose","stream","parse","xmlStream","render","xml","toXml","dflt","always","undefined","toString","toAttribute","attr","parseInt","parseFloat","module","exports"],"mappings":"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","sourcesContent":["const parseSax = require('../../utils/parse-sax');\r\nconst XmlStream = require('../../utils/xml-stream');\r\n\r\n/* 'virtual' methods used as a form of documentation */\r\n/* eslint-disable class-methods-use-this */\r\n\r\n// Base class for Xforms\r\nclass BaseXform {\r\n  // constructor(/* model, name */) {}\r\n\r\n  // ============================================================\r\n  // Virtual Interface\r\n  prepare(/* model, options */) {\r\n    // optional preparation (mutation) of model so it is ready for write\r\n  }\r\n\r\n  render(/* xmlStream, model */) {\r\n    // convert model to xml\r\n  }\r\n\r\n  parseOpen(node) {\r\n    // XML node opened\r\n  }\r\n\r\n  parseText(text) {\r\n    // chunk of text encountered for current node\r\n  }\r\n\r\n  parseClose(name) {\r\n    // XML node closed\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    // optional post-parse step (opposite to prepare)\r\n  }\r\n\r\n  // ============================================================\r\n  reset() {\r\n    // to make sure parses don't bleed to next iteration\r\n    this.model = null;\r\n\r\n    // if we have a map - reset them too\r\n    if (this.map) {\r\n      Object.values(this.map).forEach(xform => {\r\n        if (xform instanceof BaseXform) {\r\n          xform.reset();\r\n        } else if (xform.xform) {\r\n          xform.xform.reset();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  mergeModel(obj) {\r\n    // set obj's props to this.model\r\n    this.model = Object.assign(this.model || {}, obj);\r\n  }\r\n\r\n  async parse(saxParser) {\r\n    for await (const events of saxParser) {\r\n      for (const {eventType, value} of events) {\r\n        if (eventType === 'opentag') {\r\n          this.parseOpen(value);\r\n        } else if (eventType === 'text') {\r\n          this.parseText(value);\r\n        } else if (eventType === 'closetag') {\r\n          if (!this.parseClose(value.name)) {\r\n            return this.model;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return this.model;\r\n  }\r\n\r\n  async parseStream(stream) {\r\n    return this.parse(parseSax(stream));\r\n  }\r\n\r\n  get xml() {\r\n    // convenience function to get the xml of this.model\r\n    // useful for manager types that are built during the prepare phase\r\n    return this.toXml(this.model);\r\n  }\r\n\r\n  toXml(model) {\r\n    const xmlStream = new XmlStream();\r\n    this.render(xmlStream, model);\r\n    return xmlStream.xml;\r\n  }\r\n\r\n  // ============================================================\r\n  // Useful Utilities\r\n  static toAttribute(value, dflt, always = false) {\r\n    if (value === undefined) {\r\n      if (always) {\r\n        return dflt;\r\n      }\r\n    } else if (always || value !== dflt) {\r\n      return value.toString();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static toStringAttribute(value, dflt, always = false) {\r\n    return BaseXform.toAttribute(value, dflt, always);\r\n  }\r\n\r\n  static toStringValue(attr, dflt) {\r\n    return attr === undefined ? dflt : attr;\r\n  }\r\n\r\n  static toBoolAttribute(value, dflt, always = false) {\r\n    if (value === undefined) {\r\n      if (always) {\r\n        return dflt;\r\n      }\r\n    } else if (always || value !== dflt) {\r\n      return value ? '1' : '0';\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static toBoolValue(attr, dflt) {\r\n    return attr === undefined ? dflt : attr === '1';\r\n  }\r\n\r\n  static toIntAttribute(value, dflt, always = false) {\r\n    return BaseXform.toAttribute(value, dflt, always);\r\n  }\r\n\r\n  static toIntValue(attr, dflt) {\r\n    return attr === undefined ? dflt : parseInt(attr, 10);\r\n  }\r\n\r\n  static toFloatAttribute(value, dflt, always = false) {\r\n    return BaseXform.toAttribute(value, dflt, always);\r\n  }\r\n\r\n  static toFloatValue(attr, dflt) {\r\n    return attr === undefined ? dflt : parseFloat(attr);\r\n  }\r\n}\r\n\r\nmodule.exports = BaseXform;\r\n"],"file":"base-xform.js"}
=======
{"version":3,"file":"base-xform.js","names":["parseSax","require","XmlStream","BaseXform","prepare","render","parseOpen","node","parseText","text","parseClose","name","reconcile","model","options","reset","map","Object","values","forEach","xform","mergeModel","obj","assign","parse","saxParser","events","eventType","value","parseStream","stream","xml","toXml","xmlStream","toAttribute","dflt","always","arguments","length","undefined","toString","toStringAttribute","toStringValue","attr","toBoolAttribute","toBoolValue","toIntAttribute","toIntValue","parseInt","toFloatAttribute","toFloatValue","parseFloat","module","exports"],"sources":["../../../../lib/xlsx/xform/base-xform.js"],"sourcesContent":["const parseSax = require('../../utils/parse-sax');\nconst XmlStream = require('../../utils/xml-stream');\n\n/* 'virtual' methods used as a form of documentation */\n/* eslint-disable class-methods-use-this */\n\n// Base class for Xforms\nclass BaseXform {\n  // constructor(/* model, name */) {}\n\n  // ============================================================\n  // Virtual Interface\n  prepare(/* model, options */) {\n    // optional preparation (mutation) of model so it is ready for write\n  }\n\n  render(/* xmlStream, model */) {\n    // convert model to xml\n  }\n\n  parseOpen(node) {\n    // XML node opened\n  }\n\n  parseText(text) {\n    // chunk of text encountered for current node\n  }\n\n  parseClose(name) {\n    // XML node closed\n  }\n\n  reconcile(model, options) {\n    // optional post-parse step (opposite to prepare)\n  }\n\n  // ============================================================\n  reset() {\n    // to make sure parses don't bleed to next iteration\n    this.model = null;\n\n    // if we have a map - reset them too\n    if (this.map) {\n      Object.values(this.map).forEach(xform => {\n        if (xform instanceof BaseXform) {\n          xform.reset();\n        } else if (xform.xform) {\n          xform.xform.reset();\n        }\n      });\n    }\n  }\n\n  mergeModel(obj) {\n    // set obj's props to this.model\n    this.model = Object.assign(this.model || {}, obj);\n  }\n\n  async parse(saxParser) {\n    for await (const events of saxParser) {\n      for (const {eventType, value} of events) {\n        if (eventType === 'opentag') {\n          this.parseOpen(value);\n        } else if (eventType === 'text') {\n          this.parseText(value);\n        } else if (eventType === 'closetag') {\n          if (!this.parseClose(value.name)) {\n            return this.model;\n          }\n        }\n      }\n    }\n    return this.model;\n  }\n\n  async parseStream(stream) {\n    return this.parse(parseSax(stream));\n  }\n\n  get xml() {\n    // convenience function to get the xml of this.model\n    // useful for manager types that are built during the prepare phase\n    return this.toXml(this.model);\n  }\n\n  toXml(model) {\n    const xmlStream = new XmlStream();\n    this.render(xmlStream, model);\n    return xmlStream.xml;\n  }\n\n  // ============================================================\n  // Useful Utilities\n  static toAttribute(value, dflt, always = false) {\n    if (value === undefined) {\n      if (always) {\n        return dflt;\n      }\n    } else if (always || value !== dflt) {\n      return value.toString();\n    }\n    return undefined;\n  }\n\n  static toStringAttribute(value, dflt, always = false) {\n    return BaseXform.toAttribute(value, dflt, always);\n  }\n\n  static toStringValue(attr, dflt) {\n    return attr === undefined ? dflt : attr;\n  }\n\n  static toBoolAttribute(value, dflt, always = false) {\n    if (value === undefined) {\n      if (always) {\n        return dflt;\n      }\n    } else if (always || value !== dflt) {\n      return value ? '1' : '0';\n    }\n    return undefined;\n  }\n\n  static toBoolValue(attr, dflt) {\n    return attr === undefined ? dflt : attr === '1';\n  }\n\n  static toIntAttribute(value, dflt, always = false) {\n    return BaseXform.toAttribute(value, dflt, always);\n  }\n\n  static toIntValue(attr, dflt) {\n    return attr === undefined ? dflt : parseInt(attr, 10);\n  }\n\n  static toFloatAttribute(value, dflt, always = false) {\n    return BaseXform.toAttribute(value, dflt, always);\n  }\n\n  static toFloatValue(attr, dflt) {\n    return attr === undefined ? dflt : parseFloat(attr);\n  }\n}\n\nmodule.exports = BaseXform;\n"],"mappings":"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"}
>>>>>>> 95bdce0e2476f31a1a1d26b5d1f458cd5295e48d
