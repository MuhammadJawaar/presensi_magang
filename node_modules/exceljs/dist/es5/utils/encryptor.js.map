<<<<<<< HEAD
{"version":3,"sources":["../../../lib/utils/encryptor.js"],"names":["crypto","require","Encryptor","hash","algorithm","createHash","buffers","update","Buffer","concat","digest","convertPasswordToHash","password","hashAlgorithm","saltValue","spinCount","toLowerCase","hashes","getHashes","indexOf","Error","passwordBuffer","from","key","i","iterator","alloc","writeUInt32LE","toString","randomBytes","size","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAMC,SAAS,GAAG;AAChB;;;;;AAKAC,EAAAA,IANgB,gBAMXC,SANW,EAMY;AAC1B,QAAMD,IAAI,GAAGH,MAAM,CAACK,UAAP,CAAkBD,SAAlB,CAAb;;AAD0B,sCAATE,OAAS;AAATA,MAAAA,OAAS;AAAA;;AAE1BH,IAAAA,IAAI,CAACI,MAAL,CAAYC,MAAM,CAACC,MAAP,CAAcH,OAAd,CAAZ;AACA,WAAOH,IAAI,CAACO,MAAL,EAAP;AACD,GAVe;;AAWhB;;;;;;;;;;AAUAC,EAAAA,qBArBgB,iCAqBMC,QArBN,EAqBgBC,aArBhB,EAqB+BC,SArB/B,EAqB0CC,SArB1C,EAqBqD;AACnEF,IAAAA,aAAa,GAAGA,aAAa,CAACG,WAAd,EAAhB;AACA,QAAMC,MAAM,GAAGjB,MAAM,CAACkB,SAAP,EAAf;;AACA,QAAID,MAAM,CAACE,OAAP,CAAeN,aAAf,IAAgC,CAApC,EAAuC;AACrC,YAAM,IAAIO,KAAJ,2BAA6BP,aAA7B,sBAAN;AACD,KALkE,CAOnE;;;AACA,QAAMQ,cAAc,GAAGb,MAAM,CAACc,IAAP,CAAYV,QAAZ,EAAsB,SAAtB,CAAvB,CARmE,CASnE;;AACA,QAAIW,GAAG,GAAG,KAAKpB,IAAL,CAAUU,aAAV,EAAyBL,MAAM,CAACc,IAAP,CAAYR,SAAZ,EAAuB,QAAvB,CAAzB,EAA2DO,cAA3D,CAAV,CAVmE,CAWnE;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,SAApB,EAA+BS,CAAC,EAAhC,EAAoC;AAClC,UAAMC,QAAQ,GAAGjB,MAAM,CAACkB,KAAP,CAAa,CAAb,CAAjB,CADkC,CAElC;AACA;;AACAD,MAAAA,QAAQ,CAACE,aAAT,CAAuBH,CAAvB,EAA0B,CAA1B;AACAD,MAAAA,GAAG,GAAG,KAAKpB,IAAL,CAAUU,aAAV,EAAyBU,GAAzB,EAA8BE,QAA9B,CAAN;AACD;;AACD,WAAOF,GAAG,CAACK,QAAJ,CAAa,QAAb,CAAP;AACD,GAzCe;;AA0ChB;;;;AAIAC,EAAAA,WA9CgB,uBA8CJC,IA9CI,EA8CE;AAChB,WAAO9B,MAAM,CAAC6B,WAAP,CAAmBC,IAAnB,CAAP;AACD;AAhDe,CAAlB;AAkDAC,MAAM,CAACC,OAAP,GAAiB9B,SAAjB","sourcesContent":["'use strict';\r\n\r\nconst crypto = require('crypto');\r\n\r\nconst Encryptor = {\r\n  /**\r\n   * Calculate a hash of the concatenated buffers with the given algorithm.\r\n   * @param {string} algorithm - The hash algorithm.\r\n   * @returns {Buffer} The hash\r\n   */\r\n  hash(algorithm, ...buffers) {\r\n    const hash = crypto.createHash(algorithm);\r\n    hash.update(Buffer.concat(buffers));\r\n    return hash.digest();\r\n  },\r\n  /**\r\n   * Convert a password into an encryption key\r\n   * @param {string} password - The password\r\n   * @param {string} hashAlgorithm - The hash algoritm\r\n   * @param {string} saltValue - The salt value\r\n   * @param {number} spinCount - The spin count\r\n   * @param {number} keyBits - The length of the key in bits\r\n   * @param {Buffer} blockKey - The block key\r\n   * @returns {Buffer} The encryption key\r\n   */\r\n  convertPasswordToHash(password, hashAlgorithm, saltValue, spinCount) {\r\n    hashAlgorithm = hashAlgorithm.toLowerCase();\r\n    const hashes = crypto.getHashes();\r\n    if (hashes.indexOf(hashAlgorithm) < 0) {\r\n      throw new Error(`Hash algorithm '${hashAlgorithm}' not supported!`);\r\n    }\r\n\r\n    // Password must be in unicode buffer\r\n    const passwordBuffer = Buffer.from(password, 'utf16le');\r\n    // Generate the initial hash\r\n    let key = this.hash(hashAlgorithm, Buffer.from(saltValue, 'base64'), passwordBuffer);\r\n    // Now regenerate until spin count\r\n    for (let i = 0; i < spinCount; i++) {\r\n      const iterator = Buffer.alloc(4);\r\n      // this is the 'special' element of Excel password hashing\r\n      // that stops us from using crypto.pbkdf2()\r\n      iterator.writeUInt32LE(i, 0);\r\n      key = this.hash(hashAlgorithm, key, iterator);\r\n    }\r\n    return key.toString('base64');\r\n  },\r\n  /**\r\n   * Generates cryptographically strong pseudo-random data.\r\n   * @param size The size argument is a number indicating the number of bytes to generate.\r\n   */\r\n  randomBytes(size) {\r\n    return crypto.randomBytes(size);\r\n  },\r\n};\r\nmodule.exports = Encryptor;\r\n"],"file":"encryptor.js"}
=======
{"version":3,"file":"encryptor.js","names":["crypto","require","Encryptor","hash","algorithm","createHash","_len","arguments","length","buffers","Array","_key","update","Buffer","concat","digest","convertPasswordToHash","password","hashAlgorithm","saltValue","spinCount","toLowerCase","hashes","getHashes","indexOf","Error","passwordBuffer","from","key","i","iterator","alloc","writeUInt32LE","toString","randomBytes","size","module","exports"],"sources":["../../../lib/utils/encryptor.js"],"sourcesContent":["'use strict';\n\nconst crypto = require('crypto');\n\nconst Encryptor = {\n  /**\n   * Calculate a hash of the concatenated buffers with the given algorithm.\n   * @param {string} algorithm - The hash algorithm.\n   * @returns {Buffer} The hash\n   */\n  hash(algorithm, ...buffers) {\n    const hash = crypto.createHash(algorithm);\n    hash.update(Buffer.concat(buffers));\n    return hash.digest();\n  },\n  /**\n   * Convert a password into an encryption key\n   * @param {string} password - The password\n   * @param {string} hashAlgorithm - The hash algoritm\n   * @param {string} saltValue - The salt value\n   * @param {number} spinCount - The spin count\n   * @param {number} keyBits - The length of the key in bits\n   * @param {Buffer} blockKey - The block key\n   * @returns {Buffer} The encryption key\n   */\n  convertPasswordToHash(password, hashAlgorithm, saltValue, spinCount) {\n    hashAlgorithm = hashAlgorithm.toLowerCase();\n    const hashes = crypto.getHashes();\n    if (hashes.indexOf(hashAlgorithm) < 0) {\n      throw new Error(`Hash algorithm '${hashAlgorithm}' not supported!`);\n    }\n\n    // Password must be in unicode buffer\n    const passwordBuffer = Buffer.from(password, 'utf16le');\n    // Generate the initial hash\n    let key = this.hash(hashAlgorithm, Buffer.from(saltValue, 'base64'), passwordBuffer);\n    // Now regenerate until spin count\n    for (let i = 0; i < spinCount; i++) {\n      const iterator = Buffer.alloc(4);\n      // this is the 'special' element of Excel password hashing\n      // that stops us from using crypto.pbkdf2()\n      iterator.writeUInt32LE(i, 0);\n      key = this.hash(hashAlgorithm, key, iterator);\n    }\n    return key.toString('base64');\n  },\n  /**\n   * Generates cryptographically strong pseudo-random data.\n   * @param size The size argument is a number indicating the number of bytes to generate.\n   */\n  randomBytes(size) {\n    return crypto.randomBytes(size);\n  },\n};\nmodule.exports = Encryptor;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAMC,SAAS,GAAG;EAChB;AACF;AACA;AACA;AACA;EACEC,IAAIA,CAACC,SAAS,EAAc;IAC1B,MAAMD,IAAI,GAAGH,MAAM,CAACK,UAAU,CAACD,SAAS,CAAC;IAAC,SAAAE,IAAA,GAAAC,SAAA,CAAAC,MAAA,EADzBC,OAAO,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAPF,OAAO,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IAExBR,IAAI,CAACS,MAAM,CAACC,MAAM,CAACC,MAAM,CAACL,OAAO,CAAC,CAAC;IACnC,OAAON,IAAI,CAACY,MAAM,CAAC,CAAC;EACtB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,qBAAqBA,CAACC,QAAQ,EAAEC,aAAa,EAAEC,SAAS,EAAEC,SAAS,EAAE;IACnEF,aAAa,GAAGA,aAAa,CAACG,WAAW,CAAC,CAAC;IAC3C,MAAMC,MAAM,GAAGtB,MAAM,CAACuB,SAAS,CAAC,CAAC;IACjC,IAAID,MAAM,CAACE,OAAO,CAACN,aAAa,CAAC,GAAG,CAAC,EAAE;MACrC,MAAM,IAAIO,KAAK,CAAE,mBAAkBP,aAAc,kBAAiB,CAAC;IACrE;;IAEA;IACA,MAAMQ,cAAc,GAAGb,MAAM,CAACc,IAAI,CAACV,QAAQ,EAAE,SAAS,CAAC;IACvD;IACA,IAAIW,GAAG,GAAG,IAAI,CAACzB,IAAI,CAACe,aAAa,EAAEL,MAAM,CAACc,IAAI,CAACR,SAAS,EAAE,QAAQ,CAAC,EAAEO,cAAc,CAAC;IACpF;IACA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,SAAS,EAAES,CAAC,EAAE,EAAE;MAClC,MAAMC,QAAQ,GAAGjB,MAAM,CAACkB,KAAK,CAAC,CAAC,CAAC;MAChC;MACA;MACAD,QAAQ,CAACE,aAAa,CAACH,CAAC,EAAE,CAAC,CAAC;MAC5BD,GAAG,GAAG,IAAI,CAACzB,IAAI,CAACe,aAAa,EAAEU,GAAG,EAAEE,QAAQ,CAAC;IAC/C;IACA,OAAOF,GAAG,CAACK,QAAQ,CAAC,QAAQ,CAAC;EAC/B,CAAC;EACD;AACF;AACA;AACA;EACEC,WAAWA,CAACC,IAAI,EAAE;IAChB,OAAOnC,MAAM,CAACkC,WAAW,CAACC,IAAI,CAAC;EACjC;AACF,CAAC;AACDC,MAAM,CAACC,OAAO,GAAGnC,SAAS"}
>>>>>>> 95bdce0e2476f31a1a1d26b5d1f458cd5295e48d
